for i in range(1, 11):
    print(i)

for n in range(1, 21):
    if n % 2 == 0:
        print(f"{n} est pair")


plantes = ["lavande", "gaura", "sauge", "echinacea", "achill√©e"]
for p in plantes:
    print(f"J‚Äôaime associer {p} en massif en plein soleil.")

for i, p in enumerate(plantes, start=1):
    print(f"{i}. {p}")

notes = [12, 15, 9, 18, 16]
somme = 0
for n in notes:
    somme += n
moyenne = somme / len(notes)
print("Somme :", somme, "| Moyenne :", moyenne)

plantes_expo = [
    ("lavande", "plein soleil"),
    ("hosta", "ombre"),
    ("gaura", "soleil"),
    ("foug√®re", "ombre"),
]
selection = []
for nom, expo in plantes_expo:
    if "soleil" in expo:
        selection.append(nom)
print("Plantes soleil :", selection)

c = 1
while c <= 5:
    print("c =", c)
    c += 1

couleurs = ["rouge", "jaune", "violet"]
formes = ["boule", "√©pis", "port dress√©"]
idees = []
for c in couleurs:
    for f in formes:
        idees.append(f"Massif {c} ‚Äì {f}")
print(idees)

couleurs = ["rouge", "jaune", "violet"]
formes = ["boule", "√©pis", "port dress√©"]
saisons = ["printemps", "√©t√©"]

idees = []

for c in couleurs:
    for f in formes:
        for s in saisons:
            idees.append(f"Massif {c} ‚Äì {f} ‚Äì {s}")
            
print("\nüåø Liste des id√©es de massifs :\n")
for idee in idees:
    print(idee)

from itertools import product
from random import shuffle

couleurs = ["rouge", "jaune", "violet"]
formes   = ["boule", "√©pis", "port dress√©"]
saisons  = ["printemps", "√©t√©"]

def genere_idees(couleurs, formes, saisons,
                 include=None,   # ex: {"saisons": {"√©t√©"}, "formes": {"boule","√©pis"}}
                 exclude=None,   # ex: {"couleurs": {"violet"}}
                 prefer=None,    # ex: {"couleurs": {"rouge"}}
                 limit=None,     # ex: 5 ‚Üí ne renvoyer que 5 id√©es
                 shuffle_first=True):
    include = include or {}
    exclude = exclude or {}
    prefer  = prefer or {}

    # 1) G√©n√©ration brute (toutes combinaisons)
    combos = list(product(couleurs, formes, saisons))  # [(c,f,s), ...]

    # 2) Filtre "include" (garde seulement ce qui est demand√©)
    def keep(triple):
        c, f, s = triple
        ok = True
        if "couleurs" in include: ok &= c in include["couleurs"]
        if "formes"   in include: ok &= f in include["formes"]
        if "saisons"  in include: ok &= s in include["saisons"]
        return ok

    if include:
        combos = [t for t in combos if keep(t)]

    # 3) Filtre "exclude" (retire ce qui est interdit)
    def banned(triple):
        c, f, s = triple
        if "couleurs" in exclude and c in exclude["couleurs"]: return True
        if "formes"   in exclude and f in exclude["formes"]:   return True
        if "saisons"  in exclude and s in exclude["saisons"]:  return True
        return False

    if exclude:
        combos = [t for t in combos if not banned(t)]

    # 4) Score de pr√©f√©rence (priorise ce que tu aimes)
    def score(triple):
        c, f, s = triple
        sc = 0
        if "couleurs" in prefer and c in prefer["couleurs"]: sc += 2
        if "formes"   in prefer and f in prefer["formes"]:   sc += 1
        if "saisons"  in prefer and s in prefer["saisons"]:  sc += 1
        return sc

    # On m√©lange d‚Äôabord (pour √©viter un ordre toujours identique),
    # puis on trie par score descendant.
    if shuffle_first:
        shuffle(combos)
    combos.sort(key=score, reverse=True)

    # 5) Mise en forme finale
    idees = [f"Massif {c} ‚Äì {f} ‚Äì {s}" for (c, f, s) in combos]

    # 6) Limitation √©ventuelle
    if limit is not None:
        idees = idees[:limit]

    return idees

def affiche(idees):
    print("\nüåø Id√©es de massifs :\n")
    for i, idee in enumerate(idees, start=1):
        print(f"{i:2d}. {idee}")

# ----------------- EXEMPLES D‚ÄôUSAGE -----------------

# A) √ât√© uniquement, formes boule/√©pis, privil√©gier rouge, montrer 6 id√©es
idees_A = genere_idees(
    couleurs, formes, saisons,
    include={"saisons": {"√©t√©"}, "formes": {"boule", "√©pis"}},
    prefer={"couleurs": {"rouge"}},
    limit=6
)
affiche(idees_A)

# B) Exclure le violet et "port dress√©", trier par pr√©f√©rence pour "printemps"
idees_B = genere_idees(
    couleurs, formes, saisons,
    exclude={"couleurs": {"violet"}, "formes": {"port dress√©"}},
    prefer={"saisons": {"printemps"}}
)
affiche(idees_B)


# -*- coding: utf-8 -*-

arbustes = [
    {
        "nom": "Mahonia √ó media",
        "floraison": "novembre‚Äìmars (hiver-d√©but printemps)",
        "couleur": "jaune",
        "pollinisateurs": "nectar/pollen hivernaux (abeilles, bourdons)",
        "racines": "drageonnant (rhizomes), croissance mod√©r√©e"
    },
    {
        "nom": "Viburnum tinus",
        "floraison": "novembre‚Äìavril (hiver-printemps)",
        "couleur": "blanc/ros√©",
        "pollinisateurs": "source de pollen/nectar en hiver",
        "racines": "fibreux, compact √† mod√©r√©ment profond, non agressif"
    },
    {
        "nom": "Choisya ternata",
        "floraison": "printemps + souvent √©t√©/automne (remont√©e)",
        "couleur": "blanc parfum√©",
        "pollinisateurs": "abeilles, papillons (floraison longue possible)",
        "racines": "fibreux superficiel; √©viter l‚Äôexc√®s d‚Äôeau (drainage)"
    },
    {
        "nom": "Caryopteris √ó clandonensis",
        "floraison": "fin √©t√©‚Äìautomne",
        "couleur": "bleu",
        "pollinisateurs": "tr√®s nectarif√®re en fin de saison",
        "racines": "fibreux, non tra√ßant (buisson bas)"
    },
    {
        "nom": "Abelia √ó grandiflora",
        "floraison": "fin printemps‚Äìautomne (longue)",
        "couleur": "blanc ros√©",
        "pollinisateurs": "tr√®s mellif√®re (longue p√©riode)",
        "racines": "fibreux; pr√©f√®re sols drain√©s"
    },
    {
        "nom": "Buddleja davidii",
        "floraison": "√©t√©‚Äìd√©but automne",
        "couleur": "mauve/rose/blanc selon cultivar",
        "pollinisateurs": "abeilles & papillons",
        "racines": "fibreux, superficiel et vigoureux; peut drageonner/repartir"
    }
]

# Affichage propre
print("\nüåº Arbustes mellif√®res pour floraisons √©tal√©es (climat parisien)\n")
for i, a in enumerate(arbustes, start=1):
    print(f"{i}. {a['nom']}")
    print(f"   - Floraison : {a['floraison']}")
    print(f"   - Couleur   : {a['couleur']}")
    print(f"   - Pollinis. : {a['pollinisateurs']}")
    print(f"   - Racines   : {a['racines']}\n")

    brut = ["  Lavande  ", "GAURA", "sauge  "]
propre = []
for nom in brut:
    propre.append(nom.strip().lower())
print(propre)  # ['lavande', 'gaura', 'sauge']

jours = ["Lun","Mar","Mer","Jeu","Ven","Sam","Dim"]
taches = ["arrosage", "d√©sherbage", "taille l√©g√®re", "relev√© floraison", "paillage", "repos", "balade"]

for j, t in zip(jours, taches):
    print(f"{j} ‚Üí {t}")
